[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Practical One",
    "section": "",
    "text": "1 GitHub\nhttps://github.com/Fafa1007/Practicals",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>GitHub</span>"
    ]
  },
  {
    "objectID": "Practical One.html",
    "href": "Practical One.html",
    "title": "2  Practical One",
    "section": "",
    "text": "2.1 Question 1\nFind all rows in “airquality” that have missing values. Note that the airquality dataset in R is always available (just type airquality in the console to see it).\nairquality_q1 &lt;- airquality[!complete.cases(airquality),] \nairquality_q1\n\n    Ozone Solar.R Wind Temp Month Day\n5      NA      NA 14.3   56     5   5\n6      28      NA 14.9   66     5   6\n10     NA     194  8.6   69     5  10\n11      7      NA  6.9   74     5  11\n25     NA      66 16.6   57     5  25\n26     NA     266 14.9   58     5  26\n27     NA      NA  8.0   57     5  27\n32     NA     286  8.6   78     6   1\n33     NA     287  9.7   74     6   2\n34     NA     242 16.1   67     6   3\n35     NA     186  9.2   84     6   4\n36     NA     220  8.6   85     6   5\n37     NA     264 14.3   79     6   6\n39     NA     273  6.9   87     6   8\n42     NA     259 10.9   93     6  11\n43     NA     250  9.2   92     6  12\n45     NA     332 13.8   80     6  14\n46     NA     322 11.5   79     6  15\n52     NA     150  6.3   77     6  21\n53     NA      59  1.7   76     6  22\n54     NA      91  4.6   76     6  23\n55     NA     250  6.3   76     6  24\n56     NA     135  8.0   75     6  25\n57     NA     127  8.0   78     6  26\n58     NA      47 10.3   73     6  27\n59     NA      98 11.5   80     6  28\n60     NA      31 14.9   77     6  29\n61     NA     138  8.0   83     6  30\n65     NA     101 10.9   84     7   4\n72     NA     139  8.6   82     7  11\n75     NA     291 14.9   91     7  14\n83     NA     258  9.7   81     7  22\n84     NA     295 11.5   82     7  23\n96     78      NA  6.9   86     8   4\n97     35      NA  7.4   85     8   5\n98     66      NA  4.6   87     8   6\n102    NA     222  8.6   92     8  10\n103    NA     137 11.5   86     8  11\n107    NA      64 11.5   79     8  15\n115    NA     255 12.6   75     8  23\n119    NA     153  5.7   88     8  27\n150    NA     145 13.2   77     9  27",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Practical One</span>"
    ]
  },
  {
    "objectID": "Practical One.html#question-2",
    "href": "Practical One.html#question-2",
    "title": "2  Practical One",
    "section": "2.2 Question 2",
    "text": "2.2 Question 2\nFind mean, sd, min, max for each of temperature and ozone level.\n\nairquality_q2 &lt;- airquality  \nairquality_q2 \n\n    Ozone Solar.R Wind Temp Month Day\n1      41     190  7.4   67     5   1\n2      36     118  8.0   72     5   2\n3      12     149 12.6   74     5   3\n4      18     313 11.5   62     5   4\n5      NA      NA 14.3   56     5   5\n6      28      NA 14.9   66     5   6\n7      23     299  8.6   65     5   7\n8      19      99 13.8   59     5   8\n9       8      19 20.1   61     5   9\n10     NA     194  8.6   69     5  10\n11      7      NA  6.9   74     5  11\n12     16     256  9.7   69     5  12\n13     11     290  9.2   66     5  13\n14     14     274 10.9   68     5  14\n15     18      65 13.2   58     5  15\n16     14     334 11.5   64     5  16\n17     34     307 12.0   66     5  17\n18      6      78 18.4   57     5  18\n19     30     322 11.5   68     5  19\n20     11      44  9.7   62     5  20\n21      1       8  9.7   59     5  21\n22     11     320 16.6   73     5  22\n23      4      25  9.7   61     5  23\n24     32      92 12.0   61     5  24\n25     NA      66 16.6   57     5  25\n26     NA     266 14.9   58     5  26\n27     NA      NA  8.0   57     5  27\n28     23      13 12.0   67     5  28\n29     45     252 14.9   81     5  29\n30    115     223  5.7   79     5  30\n31     37     279  7.4   76     5  31\n32     NA     286  8.6   78     6   1\n33     NA     287  9.7   74     6   2\n34     NA     242 16.1   67     6   3\n35     NA     186  9.2   84     6   4\n36     NA     220  8.6   85     6   5\n37     NA     264 14.3   79     6   6\n38     29     127  9.7   82     6   7\n39     NA     273  6.9   87     6   8\n40     71     291 13.8   90     6   9\n41     39     323 11.5   87     6  10\n42     NA     259 10.9   93     6  11\n43     NA     250  9.2   92     6  12\n44     23     148  8.0   82     6  13\n45     NA     332 13.8   80     6  14\n46     NA     322 11.5   79     6  15\n47     21     191 14.9   77     6  16\n48     37     284 20.7   72     6  17\n49     20      37  9.2   65     6  18\n50     12     120 11.5   73     6  19\n51     13     137 10.3   76     6  20\n52     NA     150  6.3   77     6  21\n53     NA      59  1.7   76     6  22\n54     NA      91  4.6   76     6  23\n55     NA     250  6.3   76     6  24\n56     NA     135  8.0   75     6  25\n57     NA     127  8.0   78     6  26\n58     NA      47 10.3   73     6  27\n59     NA      98 11.5   80     6  28\n60     NA      31 14.9   77     6  29\n61     NA     138  8.0   83     6  30\n62    135     269  4.1   84     7   1\n63     49     248  9.2   85     7   2\n64     32     236  9.2   81     7   3\n65     NA     101 10.9   84     7   4\n66     64     175  4.6   83     7   5\n67     40     314 10.9   83     7   6\n68     77     276  5.1   88     7   7\n69     97     267  6.3   92     7   8\n70     97     272  5.7   92     7   9\n71     85     175  7.4   89     7  10\n72     NA     139  8.6   82     7  11\n73     10     264 14.3   73     7  12\n74     27     175 14.9   81     7  13\n75     NA     291 14.9   91     7  14\n76      7      48 14.3   80     7  15\n77     48     260  6.9   81     7  16\n78     35     274 10.3   82     7  17\n79     61     285  6.3   84     7  18\n80     79     187  5.1   87     7  19\n81     63     220 11.5   85     7  20\n82     16       7  6.9   74     7  21\n83     NA     258  9.7   81     7  22\n84     NA     295 11.5   82     7  23\n85     80     294  8.6   86     7  24\n86    108     223  8.0   85     7  25\n87     20      81  8.6   82     7  26\n88     52      82 12.0   86     7  27\n89     82     213  7.4   88     7  28\n90     50     275  7.4   86     7  29\n91     64     253  7.4   83     7  30\n92     59     254  9.2   81     7  31\n93     39      83  6.9   81     8   1\n94      9      24 13.8   81     8   2\n95     16      77  7.4   82     8   3\n96     78      NA  6.9   86     8   4\n97     35      NA  7.4   85     8   5\n98     66      NA  4.6   87     8   6\n99    122     255  4.0   89     8   7\n100    89     229 10.3   90     8   8\n101   110     207  8.0   90     8   9\n102    NA     222  8.6   92     8  10\n103    NA     137 11.5   86     8  11\n104    44     192 11.5   86     8  12\n105    28     273 11.5   82     8  13\n106    65     157  9.7   80     8  14\n107    NA      64 11.5   79     8  15\n108    22      71 10.3   77     8  16\n109    59      51  6.3   79     8  17\n110    23     115  7.4   76     8  18\n111    31     244 10.9   78     8  19\n112    44     190 10.3   78     8  20\n113    21     259 15.5   77     8  21\n114     9      36 14.3   72     8  22\n115    NA     255 12.6   75     8  23\n116    45     212  9.7   79     8  24\n117   168     238  3.4   81     8  25\n118    73     215  8.0   86     8  26\n119    NA     153  5.7   88     8  27\n120    76     203  9.7   97     8  28\n121   118     225  2.3   94     8  29\n122    84     237  6.3   96     8  30\n123    85     188  6.3   94     8  31\n124    96     167  6.9   91     9   1\n125    78     197  5.1   92     9   2\n126    73     183  2.8   93     9   3\n127    91     189  4.6   93     9   4\n128    47      95  7.4   87     9   5\n129    32      92 15.5   84     9   6\n130    20     252 10.9   80     9   7\n131    23     220 10.3   78     9   8\n132    21     230 10.9   75     9   9\n133    24     259  9.7   73     9  10\n134    44     236 14.9   81     9  11\n135    21     259 15.5   76     9  12\n136    28     238  6.3   77     9  13\n137     9      24 10.9   71     9  14\n138    13     112 11.5   71     9  15\n139    46     237  6.9   78     9  16\n140    18     224 13.8   67     9  17\n141    13      27 10.3   76     9  18\n142    24     238 10.3   68     9  19\n143    16     201  8.0   82     9  20\n144    13     238 12.6   64     9  21\n145    23      14  9.2   71     9  22\n146    36     139 10.3   81     9  23\n147     7      49 10.3   69     9  24\n148    14      20 16.6   63     9  25\n149    30     193  6.9   70     9  26\n150    NA     145 13.2   77     9  27\n151    14     191 14.3   75     9  28\n152    18     131  8.0   76     9  29\n153    20     223 11.5   68     9  30\n\nmean_temp &lt;- mean(as.numeric(airquality_q2[[4]]), na.rm = TRUE)\nsd_temp &lt;- sd(as.numeric(airquality_q2[[4]]), na.rm = TRUE)\nmin_temp &lt;- min(as.numeric(airquality_q2[[4]]), na.rm = TRUE)\nmax_temp &lt;- max(as.numeric(airquality_q2[[4]]), na.rm = TRUE)\n\nmean_ozone &lt;- mean(as.numeric(airquality_q2[[1]]), na.rm = TRUE)\nsd_ozone &lt;- sd(as.numeric(airquality_q2[[1]]), na.rm = TRUE)\nmin_ozone &lt;- min(as.numeric(airquality_q2[[1]]), na.rm = TRUE)\nmax_ozone &lt;- max(as.numeric(airquality_q2[[1]]), na.rm = TRUE)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Practical One</span>"
    ]
  },
  {
    "objectID": "Practical One.html#question-3",
    "href": "Practical One.html#question-3",
    "title": "2  Practical One",
    "section": "2.3 Question 3",
    "text": "2.3 Question 3\n\n2.3.1 3.1\nFor linear regression, parameter estimates can be found as follows \\(\\beta=(X^TX)^{-1}X^TY\\). Here, Y is the response variable, and X is the design matrix. The cars data (an R data set, also always available in R) contains two variables: speed and distance to stop. Fit a simple linear regression model to these data, i.e. find the β estimates, using the equation above, and matrix calculations in R.\n\ncars &lt;- cars  \ncars[] &lt;- lapply(cars,as.numeric) \nhead(cars)    \n\n  speed dist\n1     4    2\n2     4   10\n3     7    4\n4     7   22\n5     8   16\n6     9   10\n\nX &lt;- cbind(1,matrix(cars$speed))\nY &lt;- matrix(cars$dist)   # Response matrix\nn &lt;- nrow(X)             # Number of observations\np &lt;- ncol(X)             # Number of parameters (intercept + predictors)\n\n\n\n2.3.2 3.2\nCalculate beta estimate, standard errors, test-statistics and p-values\n\nsimp_reg &lt;- function(matrix_x, matrix_y){\n    \n    # Compute beta estimates (OLS solution)\n    beta_hat &lt;- solve(t(X) %*% X) %*% (t(X) %*% Y)  # (X'X)^(-1) X'Y\n\n    # Compute residuals\n    y_hat &lt;- X %*% beta_hat  # Predicted values\n    residuals &lt;- Y - y_hat   # Residuals\n    \n    # Compute residual variance (sigma^2)\n    sigma_sq &lt;- sum(residuals^2) / (n - p)\n    \n    # Compute variance-covariance matrix of beta estimates\n    cov_beta &lt;- sigma_sq * solve(t(X) %*% X)\n    \n    # Compute standard errors (SE) of beta coefficients\n    SE_beta &lt;- sqrt(diag(cov_beta))\n    SE_beta\n    \n    # Compute the test-statistics\n    test_stats &lt;- beta_hat / SE_beta\n    test_stats\n    \n    # Calculate p-values\n    p_values &lt;- 2 * pt(-abs(test_stats), df = n - p)\n    \n    return_list &lt;- list(\n      Beta_Coefficients = beta_hat,\n      Standard_Error = SE_beta,\n      Test_Statistics = test_stats,\n      P_Values = p_values\n    )\n    \n    print(return_list)\n}\n\nsimp_reg(X, Y)\n\n$Beta_Coefficients\n           [,1]\n[1,] -17.579095\n[2,]   3.932409\n\n$Standard_Error\n[1] 6.7584402 0.4155128\n\n$Test_Statistics\n          [,1]\n[1,] -2.601058\n[2,]  9.463990\n\n$P_Values\n             [,1]\n[1,] 1.231882e-02\n[2,] 1.489836e-12",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Practical One</span>"
    ]
  },
  {
    "objectID": "Practical One.html#question-4",
    "href": "Practical One.html#question-4",
    "title": "2  Practical One",
    "section": "2.4 Question 4",
    "text": "2.4 Question 4\nCheck that you get the same β estimates as when fitting the linear regression model using lm() in R.\n\ncar_fit &lt;- lm(cars$dist~ cars$speed)  \nsummary(car_fit)\n\n\nCall:\nlm(formula = cars$dist ~ cars$speed)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-29.069  -9.525  -2.272   9.215  43.201 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) -17.5791     6.7584  -2.601   0.0123 *  \ncars$speed    3.9324     0.4155   9.464 1.49e-12 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 15.38 on 48 degrees of freedom\nMultiple R-squared:  0.6511,    Adjusted R-squared:  0.6438 \nF-statistic: 89.57 on 1 and 48 DF,  p-value: 1.49e-12",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Practical One</span>"
    ]
  },
  {
    "objectID": "Practical Two and Three.html",
    "href": "Practical Two and Three.html",
    "title": "3  Practical Two/Three",
    "section": "",
    "text": "3.1 Generate Simulated Data:",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Practical Two/Three</span>"
    ]
  },
  {
    "objectID": "Practical Two and Three.html#generate-simulated-data",
    "href": "Practical Two and Three.html#generate-simulated-data",
    "title": "3  Practical Two/Three",
    "section": "",
    "text": "3.1.1 1.1\nSet your seed to 1, i.e. set.seed(1).\n\nset.seed(1)\n\n\n\n3.1.2 1.2\nCreate \\(x\\) as a sequence of numbers from 1 to 100.\n\nx &lt;- 1:100\n\n\n\n3.1.3 1.3\nGenerate \\(y\\) as a noisy sine wave such that \\(y_i = sin(\\frac{x_i}{10}) +e_i\\) where \\(e_i \\sim N(0, 0.2^2)\\)\n\ny &lt;- numeric(100)\nfor (i in 1:100 ){\n  y[i] &lt;- sin(x[i]/10) + rnorm(1, mean=0, sd = 0.2)\n}\n\n\n# Define the span f which defines the number of closest neighbours to use when smoothing point xi\nf &lt;- 0.69",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Practical Two/Three</span>"
    ]
  },
  {
    "objectID": "Practical Two and Three.html#implement-the-lowess-algorithm",
    "href": "Practical Two and Three.html#implement-the-lowess-algorithm",
    "title": "3  Practical Two/Three",
    "section": "3.2 Implement the LOWESS Algorithm:",
    "text": "3.2 Implement the LOWESS Algorithm:\n\n3.2.1 2.1\nDefine a function customLowess(x, y, f) that returns the smoothed values\n\n# Function to find the weights\nlowess_weights &lt;- function(x_target, x_neighbors, d_max) {\n  # Compute the absolute distances between the target and neighbors\n  distances &lt;- abs(x_target - x_neighbors)\n  \n  # Calculate the weights using the tricubic formula\n  weights &lt;- (1 - (distances / d_max)^3)^3\n  weights[distances &gt; d_max] &lt;- 0  # No weight for points farther than d_max\n  return(weights)\n}\n\n# Function to find the Beta Coefficients to perform the weighted linear regression\nlowess_beta &lt;- function(x, y, w ){\n  x&lt;- cbind(1,x)\n  w &lt;- diag(w)\n  beta&lt;- solve(t(x)%*%w%*%x)%*%t(x)%*%w%*%y\n  return(beta)\n}\n\n# Function to perform LOWESS smoothing\nlowess_smoothing_func &lt;- function(x, y, f) {\n  n &lt;- length(x)\n  k &lt;- ceiling(f * n)  # Number of neighbors based on the span\n  smoothed_y &lt;- numeric(n)\n  \n  for (i in 1:n) {\n    # Find the k closest neighbors for each point\n    distances &lt;- abs(x[i] - x)\n    neighbor_indices &lt;- order(distances)[1:k] # gets the largest k distances\n    x_neighbors &lt;- x[neighbor_indices]\n    y_neighbors &lt;- y[neighbor_indices]\n    \n    # Compute d_max (max distance between the target and neighbors)\n    d_max &lt;- max(distances[neighbor_indices])\n    \n    # Compute the weights for the neighbors\n    weights &lt;- lowess_weights(x[i], x_neighbors, d_max)\n    betas &lt;- lowess_beta(x_neighbors,y_neighbors,weights)\n    \n    smoothed_y[i] &lt;- betas[1] + betas[2]*x[i] \n  }\n  \n  return(smoothed_y)\n}\n\nsmoothed_y &lt;- lowess_smoothing_func(x, y, f)\n\ncustom_loess &lt;- list(x, smoothed_y)\ncustom_loess\n\n[[1]]\n  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18\n [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36\n [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54\n [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72\n [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90\n [91]  91  92  93  94  95  96  97  98  99 100\n\n[[2]]\n  [1]  1.067771329  1.035792819  1.003412946  0.970639271  0.937487155\n  [6]  0.903976633  0.870132585  0.835985201  0.801568040  0.766916701\n [11]  0.732068424  0.697061925  0.661935416  0.626726835  0.591474918\n [16]  0.556219775  0.520999893  0.485851829  0.450809632  0.415903191\n [21]  0.381157199  0.346590127  0.312212456  0.278024841  0.244016825\n [26]  0.210165300  0.176426860  0.142728623  0.108953817  0.074918366\n [31]  0.040328673  0.004718096 -0.032621718 -0.072629157 -0.116141986\n [36] -0.150883266 -0.183888327 -0.214794983 -0.243274432 -0.269024825\n [41] -0.291774829 -0.311318272 -0.327497814 -0.340176458 -0.349247043\n [46] -0.354635106 -0.356275159 -0.354126166 -0.348197843 -0.338565039\n [51] -0.325329237 -0.308649915 -0.288724172 -0.265766712 -0.240004742\n [56] -0.211688604 -0.181083395 -0.148467064 -0.114136770 -0.078409116\n [61] -0.041599415 -0.004024795  0.033989282  0.072078345  0.109828778\n [66]  0.146812555  0.172714417  0.193417002  0.210562737  0.225609067\n [71]  0.239489339  0.252723106  0.265579355  0.278190223  0.290614363\n [76]  0.302873053  0.314967827  0.326887684  0.338614081  0.350123129\n [81]  0.361387073  0.372375845  0.383057687  0.393398953  0.403364041\n [86]  0.412917672  0.422024045  0.430647008  0.438750368  0.446299441\n [91]  0.453261302  0.459605503  0.465305025  0.470335307  0.474674612\n [96]  0.478304911  0.481211951  0.483387296  0.484831084  0.485552491",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Practical Two/Three</span>"
    ]
  },
  {
    "objectID": "Practical Two and Three.html#compare-with-rs-built-in-lowess",
    "href": "Practical Two and Three.html#compare-with-rs-built-in-lowess",
    "title": "3  Practical Two/Three",
    "section": "3.3 Compare with R’s Built-in lowess()",
    "text": "3.3 Compare with R’s Built-in lowess()\n\n3.3.1 3.1\nUse the built-in lowess() function with the same f value. You will also need to set the iter argument to 0.\n\nlowess_results &lt;- lowess(x, y, f, iter=0)\nlowess_results\n\n$x\n  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18\n [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36\n [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54\n [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72\n [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90\n [91]  91  92  93  94  95  96  97  98  99 100\n\n$y\n  [1]  1.067771329  1.035792819  1.003412946  0.970639271  0.937487155\n  [6]  0.903976633  0.870132585  0.835985201  0.801568040  0.766916701\n [11]  0.732068424  0.697061925  0.661935416  0.626726835  0.591474918\n [16]  0.556219775  0.520999893  0.485851829  0.450809632  0.415903191\n [21]  0.381157199  0.346590127  0.312212456  0.278024841  0.244016825\n [26]  0.210165300  0.176426860  0.142728623  0.108953817  0.074918366\n [31]  0.040328673  0.004718096 -0.032621718 -0.072629157 -0.116141986\n [36] -0.150883266 -0.183888327 -0.214794983 -0.243274432 -0.269024825\n [41] -0.291774829 -0.311318272 -0.327497814 -0.340176458 -0.349247043\n [46] -0.354635106 -0.356275159 -0.354126166 -0.348197843 -0.338565039\n [51] -0.325329237 -0.308649915 -0.288724172 -0.265766712 -0.240004742\n [56] -0.211688604 -0.181083395 -0.148467064 -0.114136770 -0.078409116\n [61] -0.041599415 -0.004024795  0.033989282  0.072078345  0.109828778\n [66]  0.146812555  0.172714417  0.193417002  0.210562737  0.225609067\n [71]  0.239489339  0.252723106  0.265579355  0.278190223  0.290614363\n [76]  0.302873053  0.314967827  0.326887684  0.338614081  0.350123129\n [81]  0.361387073  0.372375845  0.383057687  0.393398953  0.403364041\n [86]  0.412917672  0.422024045  0.430647008  0.438750368  0.446299441\n [91]  0.453261302  0.459605503  0.465305025  0.470335307  0.474674612\n [96]  0.478304911  0.481211951  0.483387296  0.484831084  0.485552491\n\n\n\n\n3.3.2 3.2\nPlot both curves to compare their smoothing values.\n\nlibrary(ggplot2)\nggplot() +\n  geom_point(aes(x = x, y = y)) +         # First scatter plot\n  geom_line(aes(x = x, y = y), color = \"red\") +  # Red line for first set of points\n  geom_line(aes(x = as.numeric(unlist(custom_loess[1]))), y = as.numeric(unlist(custom_loess[2])), color = \"blue\") + # Blue line for second set of points\n  ggtitle(\"Lowess Smoothing Using Custom Function\") +\n  xlab(\"X Values\") +\n  ylab(\"Y Values\")\n\n\n\n\n\n\n\n\n\nlibrary(ggplot2)\nggplot() +\n  geom_point(aes(x = x, y = y)) +         # First scatter plot\n  geom_line(aes(x = x, y = y), color = \"red\") +  # Red line for first set of points\n  geom_line(aes(x = as.numeric(unlist(lowess_results[1]))), y = as.numeric(unlist(lowess_results[2])), color = \"green\") + # Blue line for second set of points\n  ggtitle(\"Lowess Smoothing Using R-inbuilt Function\") +\n  xlab(\"X Values\") +\n  ylab(\"Y Values\")",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Practical Two/Three</span>"
    ]
  },
  {
    "objectID": "Practical Four.html",
    "href": "Practical Four.html",
    "title": "4  Practical Four",
    "section": "",
    "text": "4.1 Question 1\nDisplay the flights dataset in an alternative format to simply printing it (i.e. running flights).\ntibble(flights)\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\nUtilsDataRSV::view_cols(flights)\n\n[1] \"year\"\n[1] 1920\n[1] \"_____________________\"\n[1] \"month\"\n[1]  7  8  6 11  2\n[1] \"_____________________\"\n[1] \"day\"\n[1] 13  7  8 17  5\n[1] \"_____________________\"\n[1] \"dep_time\"\n[1]  922  901 1753 1813   NA\n[1] \"_____________________\"\n[1] \"sched_dep_time\"\n[1] 2219  645 2059 2100  614\n[1] \"_____________________\"\n[1] \"dep_delay\"\n[1] 129 788 375  21  NA\n[1] \"_____________________\"\n[1] \"arr_time\"\n[1] 1245 2135  417 1615   NA\n[1] \"_____________________\"\n[1] \"sched_arr_time\"\n[1] 1854 2138 1301 1153 2228\n[1] \"_____________________\"\n[1] \"arr_delay\"\n[1] 134 282 -67 270  NA\n[1] \"_____________________\"\n[1] \"carrier\"\n [1] \"AA\" \"B6\" \"VX\" \"F9\" \"YV\" \"DL\" \"US\" \"UA\" \"FL\" \"MQ\" \"HA\" \"AS\" \"WN\" \"EV\" \"OO\"\n[16] \"9E\"\n[1] \"_____________________\"\n[1] \"flight\"\n[1] 5559 4179  813 1632 4603\n[1] \"_____________________\"\n[1] \"tailnum\"\n [1] \"N14904\" \"N999DN\" \"N210FR\" \"N28478\" \"N14543\" \"N27962\" \"N662JB\" \"N517JB\"\n [9] \"N13550\" \"N662DN\" \"N351AA\" \"N657MQ\" \"N8306H\" \"N521VA\" \"N466AA\" \"N8944B\"\n[17] \"N398SW\" \"N153PQ\" \"N645MQ\" NA      \n[1] \"4024 unique entries not displayed\"\n[1] \"_____________________\"\n[1] \"origin\"\n[1] \"EWR\" \"JFK\" \"LGA\"\n[1] \"_____________________\"\n[1] \"dest\"\n [1] \"MSP\" \"AVL\" \"LGA\" \"EGE\" \"OAK\" \"PVD\" \"STL\" \"LAS\" \"ROC\" \"MYR\" \"BQN\" \"ACK\"\n[13] \"BNA\" \"RSW\" \"SEA\" \"MTJ\" \"PBI\" \"MKE\" \"DSM\" \"TPA\"\n[1] \"85 unique entries not displayed\"\n[1] \"_____________________\"\n[1] \"air_time\"\n[1] 238 110 339 135  NA\n[1] \"_____________________\"\n[1] \"distance\"\n[1]  963 1620  605  644  143\n[1] \"_____________________\"\n[1] \"hour\"\n[1] 17 13 18 21 12\n[1] \"_____________________\"\n[1] \"minute\"\n[1] 50 47 41 25 16\n[1] \"_____________________\"\n[1] \"time_hour\"\n [1] \"2013-02-24 12:00:00 EST\" \"2013-06-09 16:00:00 EDT\"\n [3] \"2013-11-30 09:00:00 EST\" \"2013-10-19 14:00:00 EDT\"\n [5] \"2013-06-13 20:00:00 EDT\" \"2013-07-14 14:00:00 EDT\"\n [7] \"2013-06-01 15:00:00 EDT\" \"2013-03-15 21:00:00 EDT\"\n [9] \"2013-12-02 20:00:00 EST\" \"2013-07-19 16:00:00 EDT\"\n[11] \"2013-09-14 10:00:00 EDT\" \"2013-12-08 18:00:00 EST\"\n[13] \"2013-06-14 13:00:00 EDT\" \"2013-08-06 12:00:00 EDT\"\n[15] \"2013-01-18 12:00:00 EST\" \"2013-02-17 18:00:00 EST\"\n[17] \"2013-01-26 06:00:00 EST\" \"2013-02-18 15:00:00 EST\"\n[19] \"2013-10-26 21:00:00 EDT\" \"2013-11-12 22:00:00 EST\"\n[1] \"6916 unique entries not displayed\"\n[1] \"_____________________\"\n\n\nWarning: Not all unique entries displayed for these non-numeric cols: tailnum,\ndest, time_hour",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Practical Four</span>"
    ]
  },
  {
    "objectID": "Practical Four.html#question-2",
    "href": "Practical Four.html#question-2",
    "title": "4  Practical Four",
    "section": "4.2 Question 2",
    "text": "4.2 Question 2\nRewrite the code below using dplyr and the pipe:\n\n# Original Code\nflight1 &lt;- flights[flights$month == 1, ] \ncarrier_vec &lt;- unique(flight1$carrier)\ncarrier_dist_vec_mean &lt;- numeric(length(carrier_vec))\ncarrier_dist_vec_sd &lt;- numeric(length(carrier_vec))\nfor (i in seq_along(carrier_vec)) {\n  carrier_dist_vec_mean[i] &lt;- mean(\n    flight1$distance[flight1$carrier == carrier_vec[i]]\n   )\n  carrier_dist_vec_sd[i] &lt;- sd(\n    flight1$distance[flight1$carrier == carrier_vec[i]]\n  )\n}\ndist_tbl &lt;- tibble(\n  carrier = carrier_vec,\n  mean_distance = carrier_dist_vec_mean,\n  sd_distance = carrier_dist_vec_sd\n)\ndist_tbl[order(dist_tbl$mean_distance), ]\n\n# A tibble: 16 × 3\n   carrier mean_distance sd_distance\n   &lt;chr&gt;           &lt;dbl&gt;       &lt;dbl&gt;\n 1 YV               229          0  \n 2 9E               476.       334. \n 3 EV               522.       294. \n 4 US               536.       553. \n 5 MQ               566.       223. \n 6 FL               691.       142. \n 7 OO               733         NA  \n 8 WN               942.       496. \n 9 B6              1062.       681. \n10 DL              1220.       644. \n11 AA              1350.       626. \n12 UA              1462.       778. \n13 F9              1620          0  \n14 AS              2402          0  \n15 VX              2495.        98.2\n16 HA              4983          0  \n\n\n\nlibrary(dplyr)\ndist_tbl &lt;- flights |&gt;\n  filter(month == 1) |&gt;\n  group_by(carrier) |&gt;\n  summarise(\n    mean_distance = mean(distance, na.rm = TRUE),\n    sd_distance = sd(distance, na.rm = TRUE)\n  ) |&gt;\n  arrange(mean_distance)\n\ndist_tbl\n\n# A tibble: 16 × 3\n   carrier mean_distance sd_distance\n   &lt;chr&gt;           &lt;dbl&gt;       &lt;dbl&gt;\n 1 YV               229          0  \n 2 9E               476.       334. \n 3 EV               522.       294. \n 4 US               536.       553. \n 5 MQ               566.       223. \n 6 FL               691.       142. \n 7 OO               733         NA  \n 8 WN               942.       496. \n 9 B6              1062.       681. \n10 DL              1220.       644. \n11 AA              1350.       626. \n12 UA              1462.       778. \n13 F9              1620          0  \n14 AS              2402          0  \n15 VX              2495.        98.2\n16 HA              4983          0",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Practical Four</span>"
    ]
  },
  {
    "objectID": "Practical Four.html#question-3",
    "href": "Practical Four.html#question-3",
    "title": "4  Practical Four",
    "section": "4.3 Question 3",
    "text": "4.3 Question 3\nExplain why the standard deviation is NA for one carrier, and why it is 0 for others. Demonstrate your answer using code.\n\nflights |&gt; filter(month ==1)|&gt; group_by(carrier) |&gt; summarise(n())\n\n# A tibble: 16 × 2\n   carrier `n()`\n   &lt;chr&gt;   &lt;int&gt;\n 1 9E       1573\n 2 AA       2794\n 3 AS         62\n 4 B6       4427\n 5 DL       3690\n 6 EV       4171\n 7 F9         59\n 8 FL        328\n 9 HA         31\n10 MQ       2271\n11 OO          1\n12 UA       4637\n13 US       1602\n14 VX        316\n15 WN        996\n16 YV         46\n\n#The standard deviation is NA when there is only one observation for a carrier, as standard deviation requires at least two values\nflights |&gt; filter (carrier==\"OO\", month == 1) |&gt; select(carrier, distance)\n\n# A tibble: 1 × 2\n  carrier distance\n  &lt;chr&gt;      &lt;dbl&gt;\n1 OO           733\n\n# If all values in the group are the same, the standard deviation is 0\nflights |&gt; filter (carrier==\"YV\", month ==1) |&gt; select(carrier, distance) |&gt; distinct()\n\n# A tibble: 1 × 2\n  carrier distance\n  &lt;chr&gt;      &lt;dbl&gt;\n1 YV           229",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Practical Four</span>"
    ]
  },
  {
    "objectID": "Practical Four.html#question-4",
    "href": "Practical Four.html#question-4",
    "title": "4  Practical Four",
    "section": "4.4 Question 4",
    "text": "4.4 Question 4\nUsing tidyr and dplyr where appropriate, construct a dataframe where the carriers are along the columns, and the rows are the average departure delay (dep_delay) flown by each carrier (carrier) in each month.\n\nlibrary(tidyr)\navg_dep_delay &lt;- flights|&gt;\n  group_by(month, carrier) |&gt;\n  summarise(average_dept_delay = mean(dep_delay, na.rm= TRUE), .groups = \"drop\") |&gt;\n  pivot_wider(\n    names_from = carrier,\n    values_from = average_dept_delay\n  ) |&gt;\n  mutate(month = factor(month, levels = 1:12, labels = month.name))\n  \n  \navg_dep_delay\n\n# A tibble: 12 × 17\n   month      `9E`    AA     AS    B6    DL    EV    F9    FL    HA    MQ    OO\n   &lt;fct&gt;     &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 January   16.9   6.93  7.35   9.49  3.85 24.2  10     1.97 54.4   6.49 67   \n 2 February  16.5   8.28  0.722 13.8   5.54 21.5  29.8   5.18 17.4   8.09 NA   \n 3 March     13.4   8.70  8.42  14.2   9.93 26.2  16.8  17.3   1.16  7.19 NA   \n 4 April     13.6  11.7  11.3   15.2   8.17 22.8  24.6  13.1  -2.1  13.7  NA   \n 5 May       22.7   9.66  6.77   9.78  9.74 20.2  35.9  19.2  -1.45 13.9  NA   \n 6 June      29.0  14.6  13.1   20.4  18.7  25.5  29.4  38.8   1.47 20.8  61   \n 7 July      31.4  12.1   2.42  24.9  20.6  26.5  31.8  41.2  -1.71 20.7  NA   \n 8 August    17.3   7.17  2.87  15.7   9.85 16.3  22.2  23.4   1.68 10.1  64   \n 9 September  7.75  5.69 -4.52   6.63  5.53  8.24  8.26 16.9  -5.44  5.35 -4.94\n10 October    9.33  3.00  0.677  2.96  3.42 13.4   9.70 13.7  -5.10  4.48 NA   \n11 November   7.56  3.10  3.08   3.52  2.85  9.83 13.5  16.9  -5.44  3.28  0.8 \n12 December  19.8  11.7  18.0   17.0  10.8  27.9  13.1  26.1  -3.14 12.7  NA   \n# ℹ 5 more variables: UA &lt;dbl&gt;, US &lt;dbl&gt;, VX &lt;dbl&gt;, WN &lt;dbl&gt;, YV &lt;dbl&gt;",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Practical Four</span>"
    ]
  },
  {
    "objectID": "Practical Four.html#question-5",
    "href": "Practical Four.html#question-5",
    "title": "4  Practical Four",
    "section": "4.5 Question 5",
    "text": "4.5 Question 5\nCalculate the proportion of flights that were delayed (dep_delay greater than 0) but arrived on or before time (arr_delay less than or equal to 0).\n\nflights_delayed &lt;- flights |&gt;\n  group_by(dep_delay &gt; 0 & arr_delay &lt;= 0) |&gt;\n  summarise(n())\n\nflights_delayed[[2]][2]/nrow(flights)\n\n[1] 0.1052391",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Practical Four</span>"
    ]
  },
  {
    "objectID": "Practical Four.html#question-6",
    "href": "Practical Four.html#question-6",
    "title": "4  Practical Four",
    "section": "4.6 Question 6",
    "text": "4.6 Question 6\nUsing the airlines and flights datasets, do the following, showing the output from each step:\n\nairlines &lt;- nycflights13::airlines\nflights &lt;- nycflights13::flights\nairlines\n\n# A tibble: 16 × 2\n   carrier name                       \n   &lt;chr&gt;   &lt;chr&gt;                      \n 1 9E      Endeavor Air Inc.          \n 2 AA      American Airlines Inc.     \n 3 AS      Alaska Airlines Inc.       \n 4 B6      JetBlue Airways            \n 5 DL      Delta Air Lines Inc.       \n 6 EV      ExpressJet Airlines Inc.   \n 7 F9      Frontier Airlines Inc.     \n 8 FL      AirTran Airways Corporation\n 9 HA      Hawaiian Airlines Inc.     \n10 MQ      Envoy Air                  \n11 OO      SkyWest Airlines Inc.      \n12 UA      United Air Lines Inc.      \n13 US      US Airways Inc.            \n14 VX      Virgin America             \n15 WN      Southwest Airlines Co.     \n16 YV      Mesa Airlines Inc.         \n\nflights\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n4.6.1 6.1\nIdentify routes that more than one airline flies\n\nmultiple_airlines_per_route &lt;- flights |&gt;\n  select(carrier,origin, dest, arr_delay) |&gt;\n  group_by(origin,dest) |&gt;\n  filter(n_distinct(carrier) &gt; 1) \n\nmultiple_airlines_per_route\n\n# A tibble: 276,735 × 4\n# Groups:   origin, dest [128]\n   carrier origin dest  arr_delay\n   &lt;chr&gt;   &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt;\n 1 AA      JFK    MIA          33\n 2 DL      LGA    ATL         -25\n 3 UA      EWR    ORD          12\n 4 B6      EWR    FLL          19\n 5 EV      LGA    IAD         -14\n 6 B6      JFK    MCO          -8\n 7 AA      LGA    ORD           8\n 8 B6      JFK    TPA          -3\n 9 UA      JFK    LAX           7\n10 UA      EWR    SFO         -14\n# ℹ 276,725 more rows\n\n\n\n\n4.6.2 6.2\nFor each such route, calculate the average arrival delay for each airline (exclude NAs). Find the names of these airlines.\n\navg_arr_delay &lt;- multiple_airlines_per_route |&gt;\n  select(carrier, origin, dest, arr_delay) |&gt;\n  group_by(carrier,origin, dest) |&gt;\n  summarise(average_arival_delay = mean(arr_delay, na.rm=TRUE)) |&gt;\n  ungroup(carrier, origin, dest)\n\n`summarise()` has grouped output by 'carrier', 'origin'. You can override using\nthe `.groups` argument.\n\nnames_avg_arr_delay &lt;- inner_join(airlines, avg_arr_delay)\n\nJoining with `by = join_by(carrier)`\n\nnames_avg_arr_delay\n\n# A tibble: 343 × 5\n   carrier name              origin dest  average_arival_delay\n   &lt;chr&gt;   &lt;chr&gt;             &lt;chr&gt;  &lt;chr&gt;                &lt;dbl&gt;\n 1 9E      Endeavor Air Inc. EWR    ATL                  -6.25\n 2 9E      Endeavor Air Inc. EWR    CVG                   1.40\n 3 9E      Endeavor Air Inc. EWR    DTW                   2.54\n 4 9E      Endeavor Air Inc. EWR    MSP                   1.60\n 5 9E      Endeavor Air Inc. JFK    ATL                   1.40\n 6 9E      Endeavor Air Inc. JFK    AUS                  -3.5 \n 7 9E      Endeavor Air Inc. JFK    BNA                  10.2 \n 8 9E      Endeavor Air Inc. JFK    BOS                   5.66\n 9 9E      Endeavor Air Inc. JFK    BUF                   6.67\n10 9E      Endeavor Air Inc. JFK    BWI                   8.73\n# ℹ 333 more rows\n\n\n\n\n4.6.3 6.3\nFor each such route, identify the airline with the worst and best average arrival delay.\n\nbest_worst&lt;- names_avg_arr_delay |&gt;\n  select(name, origin,dest,average_arival_delay) |&gt;\n  group_by(origin, dest) |&gt;\n  summarise(\n    best_airline = name[which.max(average_arival_delay)],\n    best_avg_arival_delay = max(average_arival_delay, na.rm= TRUE),\n    worst_airline = name[which.min(average_arival_delay)],\n    worst_avg_arrival_delay = min(average_arival_delay, na.rm=TRUE)\n  ) |&gt;\n  ungroup()\n\n`summarise()` has grouped output by 'origin'. You can override using the\n`.groups` argument.\n\nbest_worst\n\n# A tibble: 128 × 6\n   origin dest  best_airline             best_avg_arival_delay worst_airline    \n   &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;                                    &lt;dbl&gt; &lt;chr&gt;            \n 1 EWR    ATL   ExpressJet Airlines Inc.                 19.5  Endeavor Air Inc.\n 2 EWR    AUS   United Air Lines Inc.                     4.28 Southwest Airlin…\n 3 EWR    BDL   United Air Lines Inc.                    22.6  ExpressJet Airli…\n 4 EWR    BNA   ExpressJet Airlines Inc.                 17.7  Southwest Airlin…\n 5 EWR    BOS   JetBlue Airways                           6.87 ExpressJet Airli…\n 6 EWR    BWI   ExpressJet Airlines Inc.                 20.1  Southwest Airlin…\n 7 EWR    CHS   ExpressJet Airlines Inc.                 16.2  United Air Lines…\n 8 EWR    CLE   United Air Lines Inc.                     5.97 ExpressJet Airli…\n 9 EWR    CLT   ExpressJet Airlines Inc.                 20.5  US Airways Inc.  \n10 EWR    CVG   ExpressJet Airlines Inc.                 21.2  Endeavor Air Inc.\n# ℹ 118 more rows\n# ℹ 1 more variable: worst_avg_arrival_delay &lt;dbl&gt;\n\n\n\n\n4.6.4 6.4\nIdentify the route with the greatest difference between the best and worst performing airlines\n\ngreatest_diff &lt;- best_worst |&gt;\n  summarise(\n    origin = origin[which.max(best_avg_arival_delay - worst_avg_arrival_delay)],\n    dest = dest[which.max(best_avg_arival_delay - worst_avg_arrival_delay)],\n    differnce = max(best_avg_arival_delay - worst_avg_arrival_delay)\n  )\n\ngreatest_diff\n\n# A tibble: 1 × 3\n  origin dest  differnce\n  &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt;\n1 JFK    ATL        127.\n\n\n\n\n4.6.5 6.5\nDetermine the reason for this difference\n\n# This could be due to unexpected delays caused in the origin location on some days such as weather conditions, pilots getting sick, passenger overloads, plane maintenance issues, etc... that cause the worst arrival delay to occur.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Practical Four</span>"
    ]
  },
  {
    "objectID": "Practical Four.html#question-7",
    "href": "Practical Four.html#question-7",
    "title": "4  Practical Four",
    "section": "4.7 Question 7",
    "text": "4.7 Question 7\nIdentify all columns with missing entries, typos and any other inconsistencies in the dataset below (load it just by running the code; created using dput command, FYI):\n\ndf &lt;- dput(structure(list(id = c(\"id_1\", \"id_2\", \"id_3\", \"id_4\", \"id_5\", \n\"id_6\", \"id_7\", \"id_8\", \"id_9\", \"id_10\", \"id_11\", \"id_12\", \"id_13\", \n\"id_14\", \"id_15\", \"id_16\", \"id_17\", \"id_18\", \"id_19\", \"id_20\", \n\"id_21\", \"id_22\", \"id_23\", \"id_24\", \"id_25\", \"id_26\", \"id_27\", \n\"id_28\", \"id_29\", \"id_30\", \"id_31\", \"id_32\", \"id_33\", \"id_34\", \n\"id_35\", \"id_36\", \"id_37\", \"id_38\", \"id_39\", \"id_40\", \"id_41\", \n\"id_42\", \"id_43\", \"id_44\", \"id_45\", \"id_46\", \"id_47\", \"id_48\", \n\"id_49\", \"id_50\"), age = c(50L, 34L, 70L, 33L, 22L, 61L, 69L, \n73L, 62L, 56L, 71L, 33L, 73L, 44L, 45L, 46L, 24L, 70L, 46L, 76L, \n47L, 76L, 28L, 48L, 54L, 27L, 45L, 26L, 61L, 28L, 38L, 55L, 33L, \n36L, 62L, 58L, 72L, 31L, 34L, 51L, 61L, 64L, 26L, 28L, 60L, 29L, \n42L, 46L, 79L, 72L), gender = c(\"male\", \"male\", \"male\", \"female\", \n\"female\", \"male\", \"female\", \"male\", \"male\", \"female\", \"female\", \n\"male\", \"male\", \"female\", \"male\", \"male\", \"male\", \"male\", \"female\", \n\"male\", \"male\", \"male\", \"male\", \"female\", \"femal\", \"male\", \"female\", \n\"female\", \"female\", \"female\", \"male\", \"female\", \"female\", \"female\", \n\"male\", \"male\", \"female\", \"male\", \"female\", \"female\", \"male\", \n\"female\", \"female\", \"male\", \"male\", \"female\", \"male\", \"male\", \n\"male\", \"female\"), height = c(174.4, 197.7, 174.1, 194.5, NA, \n180.4, 170.5, 157.4, 196.8, 165.1, 153, 197.4, 186, 157.1, 177.5, \n197.7, 179.3, 170.2, 182.4, NA, 165.4, 161, 168.5, 199.2, 157.7, \n154.6, 157.1, 184.5, 181, 194.6, 183.6, 186.9, 176.1, 183, 191.1, \n189.3, 199, 172, 165.6, 170.5, 150.5, 159.2, 192.1, 161.6, 162, \n153.8, 162.3, 186.6, 192.4, 174.9), weight = c(69.4, 62.3, 55.6, \n69.5, 78.6, 60.8, 72.2, 60.9, 75.1, 67.7, 82.5, 68.7, 67.8, 76.7, \n87, 61.1, 70.6, 63.3, 81.5, 59.2, 93.2, 87.3, 83.4, 80.9, 68.6, \n76.5, 93.7, 79.1, 92, 65.6, 85.4, 63.3, 79.7, 74.1, 63.3, 78.2, \n95.7, 95.1, 63.7, 66.1, 99.3, 81, 96.9, 73.3, 70.3, 83, 57.6, \n78.6, 61.9, 98.1), blood_type = c(\"O\", \"A\", \"O\", \"O\", \"B\", \"AB\", \n\"O\", \"O\", \"O\", \"AB\", \"A\", \"O\", \"O\", \"O\", \"B\", \"A\", \"B\", \"AB\", \n\"O\", \"AB\", \"A\", \"AB\", \"O\", \"B\", \"A\", \"A\", \"B\", \"AB\", \"A\", \"B\", \n\"B\", \"A\", \"O\", \"O\", \"O\", \"B\", \"O\", \"A\", \"A\", \"B\", \"A\", \"O\", \"AB\", \n\"A\", \"A\", \"O\", \"O\", \"B\", \"A\", \"O\"), disease_status = c(\"diseased\", \n\"healthy\", \"healthy\", \"healthy\", \"healthy\", \"healthy\", \"diseased\", \n\"healthy\", \"diseased\", \"Healthy\", \"diseased\", \"healthy\", \"diseased\", \n\"healthy\", \"diseased\", \"healthy\", \"healthy\", \"healthy\", \"healthy\", \n\"healthy\", \"healthy\", \"diseased\", \"healthy\", \"diseased\", \"healthy\", \n\"healthy\", \"healthy\", \"healthy\", \"diseased\", \"diseased\", \"healthy\", \n\"healthy\", \"healthy\", \"diseased\", \"diseased\", \"diseased\", \"healthy\", \n\"diseased\", \"healthy\", \"healthy\", \"healthy\", \"healthy\", \"healthy\", \n\"diseased\", \"diseased\", \"diseased\", \"healthy\", \"healthy\", \"diseased\", \n\"diseased\"), cholesterol = c(228, 223, 213, 198, 166, 151, 195, \n199, 189, 196, 221, 156, 185, 230, 234, 174, 185, 236, 235, 180, \n165, 220, 160, 153, 250, 153, 184, 242, 212, 179, 224, 233, 181, \n199, 220, 214, 214, 248, 191, 162, 203, 173, 199, 187, 248, 189, \n173, 212, 164, 247), glucose = c(96, 78, 101, 119, 103, 91, 86, \nNA, 77, 80, 115, 85, 88, 109, NA, 71, 90, 94, 91, 87, 113, 93, \n97, 118, 109, 80, 85, 119, 99, 108, 89, 108, 97, 116, 79, 84, \n75, 81, 119, NA, 106, 109, 75, 82, 84, 75, 76, 120, 119, 77), \n    smoker = c(\"yes\", \"yes\", \"yes\", \"yes\", \"no\", \"yes\", \"no\", \n    \"yes\", \"no\", \"no\", \"no\", \"no\", \"no\", \"yes\", \"no\", \"yes\", \n    \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"no\", \n    \"no\", \"yes\", \"yes\", \"yes\", \"no\", \"no\", \"yes\", \"no\", \"yes\", \n    \"no\", \"yes\", \"no\", \"yes\", \"yes\", \"yes\", \"no\", \"no\", \"yes\", \n    \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"yes\"), exercise = c(\"occasional\", \n    \"regular\", \"occasional\", \"regular\", \"none\", \"occasional\", \n    \"regular\", \"none\", \"occasional\", \"none\", \"occasional\", \"none\", \n    \"none\", \"regular\", \"occasional\", \"none\", \"regular\", \"regular\", \n    \"none\", \"occasional\", \"none\", \"occasional\", \"occasional\", \n    \"occasional\", \"regular\", \"occasional\", \"regular\", \"regular\", \n    \"regular\", \"occasional\", \"occasional\", \"none\", \"none\", \"regular\", \n    \"occasional\", \"occasional\", \"none\", \"none\", \"none\", \"none\", \n    \"occasional\", \"regular\", \"regular\", \"none\", \"regular\", \"occasional\", \n    \"occasional\", \"none\", \"occasional\", \"regular\"), income = c(84820L, \n    81547L, 22588L, 72490L, 74533L, 25338L, 41469L, 57315L, 63629L, \n    88662L, 62615L, 56261L, 58499L, 82232L, 77584L, 77275L, 38468L, \n    54510L, 91326L, 78611L, 31402L, 29586L, 21441L, 58269L, 84173L, \n    88295L, 37940L, 43750L, 69750L, 92356L, 82518L, 91455L, 68866L, \n    51178L, 68275L, 27689L, 35418L, 81318L, 62405L, 86851L, 25654L, \n    47553L, 74474L, 51409L, 22607L, 55360L, 96351L, 21516L, 41927L, \n    55810L), education = c(\"master\", \"bachelor\", \"PhD\", \"master\", \n    \"bachelor\", \"highschool\", \"PhD\", \"highschool\", \"PhD\", \"PhD\", \n    \"bachelor\", \"highschool\", \"master\", \"bachelor\", \"PhD\", \"PhD\", \n    \"PhD\", \"bachelor\", \"master\", \"highschool\", \"PhD\", \"highschool\", \n    \"bachelor\", \"master\", \"highschool\", \"highschool\", \"master\", \n    \"master\", \"bachelor\", \"PhD\", \"highschool\", \"PhD\", \"master\", \n    \"master\", \"master\", \"PhD\", \"highschool\", \"master\", \"master\", \n    \"highschool\", \"bachelor\", \"highschool\", \"bachelor\", \"PhD\", \n    \"bachelor\", \"highschool\", \"master\", \"highschool\", \"bachelor\", \n    \"bachelor\"), region = c(\"North\", \"South\", \"North\", \"West\", \n    \"North\", \"West\", \"South\", \"South\", \"West\", \"South\", \"West\", \n    \"South\", \"West\", \"East\", \"North\", \"West\", \"North\", \"North\", \n    \"West\", \"North\", \"East\", \"West\", \"South\", \"North\", \"North\", \n    \"East\", \"East\", \"North\", \"North\", \"West\", \"South\", \"West\", \n    \"West\", \"East\", \"West\", \"North\", \"West\", \"North\", \"East\", \n    \"North\", \"West\", \"South\", \"South\", \"East\", \"North\", \"West\", \n    \"West\", \"East\", \"North\", \"East\"), marital_status = c(\"divorced\", \n    \"single\", \"divorced\", \"divorced\", \"divorced\", \"divorced\", \n    \"divorced\", \"married\", \"divorced\", \"married\", \"divorced\", \n    \"widowed\", \"married\", \"single\", \"widowed\", \"widowed\", \"single\", \n    \"divorced\", \"widowed\", \"widowed\", \"single\", \"married\", \"single\", \n    \"married\", \"widowed\", \"married\", \"single\", \"single\", \"widowed\", \n    \"married\", \"widowed\", \"divorced\", \"single\", \"married\", \"single\", \n    \"widowed\", \"widowed\", \"married\", \"widowed\", \"divorced\", \"married\", \n    \"married\", \"divorced\", \"single\", \"married\", \"widowed\", \"divorced\", \n    \"divorced\", \"single\", \"divorced\")), row.names = c(NA, -50L\n), class = c(\"tbl_df\", \"tbl\", \"data.frame\")))\n\nstructure(list(id = c(\"id_1\", \"id_2\", \"id_3\", \"id_4\", \"id_5\", \n\"id_6\", \"id_7\", \"id_8\", \"id_9\", \"id_10\", \"id_11\", \"id_12\", \"id_13\", \n\"id_14\", \"id_15\", \"id_16\", \"id_17\", \"id_18\", \"id_19\", \"id_20\", \n\"id_21\", \"id_22\", \"id_23\", \"id_24\", \"id_25\", \"id_26\", \"id_27\", \n\"id_28\", \"id_29\", \"id_30\", \"id_31\", \"id_32\", \"id_33\", \"id_34\", \n\"id_35\", \"id_36\", \"id_37\", \"id_38\", \"id_39\", \"id_40\", \"id_41\", \n\"id_42\", \"id_43\", \"id_44\", \"id_45\", \"id_46\", \"id_47\", \"id_48\", \n\"id_49\", \"id_50\"), age = c(50L, 34L, 70L, 33L, 22L, 61L, 69L, \n73L, 62L, 56L, 71L, 33L, 73L, 44L, 45L, 46L, 24L, 70L, 46L, 76L, \n47L, 76L, 28L, 48L, 54L, 27L, 45L, 26L, 61L, 28L, 38L, 55L, 33L, \n36L, 62L, 58L, 72L, 31L, 34L, 51L, 61L, 64L, 26L, 28L, 60L, 29L, \n42L, 46L, 79L, 72L), gender = c(\"male\", \"male\", \"male\", \"female\", \n\"female\", \"male\", \"female\", \"male\", \"male\", \"female\", \"female\", \n\"male\", \"male\", \"female\", \"male\", \"male\", \"male\", \"male\", \"female\", \n\"male\", \"male\", \"male\", \"male\", \"female\", \"femal\", \"male\", \"female\", \n\"female\", \"female\", \"female\", \"male\", \"female\", \"female\", \"female\", \n\"male\", \"male\", \"female\", \"male\", \"female\", \"female\", \"male\", \n\"female\", \"female\", \"male\", \"male\", \"female\", \"male\", \"male\", \n\"male\", \"female\"), height = c(174.4, 197.7, 174.1, 194.5, NA, \n180.4, 170.5, 157.4, 196.8, 165.1, 153, 197.4, 186, 157.1, 177.5, \n197.7, 179.3, 170.2, 182.4, NA, 165.4, 161, 168.5, 199.2, 157.7, \n154.6, 157.1, 184.5, 181, 194.6, 183.6, 186.9, 176.1, 183, 191.1, \n189.3, 199, 172, 165.6, 170.5, 150.5, 159.2, 192.1, 161.6, 162, \n153.8, 162.3, 186.6, 192.4, 174.9), weight = c(69.4, 62.3, 55.6, \n69.5, 78.6, 60.8, 72.2, 60.9, 75.1, 67.7, 82.5, 68.7, 67.8, 76.7, \n87, 61.1, 70.6, 63.3, 81.5, 59.2, 93.2, 87.3, 83.4, 80.9, 68.6, \n76.5, 93.7, 79.1, 92, 65.6, 85.4, 63.3, 79.7, 74.1, 63.3, 78.2, \n95.7, 95.1, 63.7, 66.1, 99.3, 81, 96.9, 73.3, 70.3, 83, 57.6, \n78.6, 61.9, 98.1), blood_type = c(\"O\", \"A\", \"O\", \"O\", \"B\", \"AB\", \n\"O\", \"O\", \"O\", \"AB\", \"A\", \"O\", \"O\", \"O\", \"B\", \"A\", \"B\", \"AB\", \n\"O\", \"AB\", \"A\", \"AB\", \"O\", \"B\", \"A\", \"A\", \"B\", \"AB\", \"A\", \"B\", \n\"B\", \"A\", \"O\", \"O\", \"O\", \"B\", \"O\", \"A\", \"A\", \"B\", \"A\", \"O\", \"AB\", \n\"A\", \"A\", \"O\", \"O\", \"B\", \"A\", \"O\"), disease_status = c(\"diseased\", \n\"healthy\", \"healthy\", \"healthy\", \"healthy\", \"healthy\", \"diseased\", \n\"healthy\", \"diseased\", \"Healthy\", \"diseased\", \"healthy\", \"diseased\", \n\"healthy\", \"diseased\", \"healthy\", \"healthy\", \"healthy\", \"healthy\", \n\"healthy\", \"healthy\", \"diseased\", \"healthy\", \"diseased\", \"healthy\", \n\"healthy\", \"healthy\", \"healthy\", \"diseased\", \"diseased\", \"healthy\", \n\"healthy\", \"healthy\", \"diseased\", \"diseased\", \"diseased\", \"healthy\", \n\"diseased\", \"healthy\", \"healthy\", \"healthy\", \"healthy\", \"healthy\", \n\"diseased\", \"diseased\", \"diseased\", \"healthy\", \"healthy\", \"diseased\", \n\"diseased\"), cholesterol = c(228, 223, 213, 198, 166, 151, 195, \n199, 189, 196, 221, 156, 185, 230, 234, 174, 185, 236, 235, 180, \n165, 220, 160, 153, 250, 153, 184, 242, 212, 179, 224, 233, 181, \n199, 220, 214, 214, 248, 191, 162, 203, 173, 199, 187, 248, 189, \n173, 212, 164, 247), glucose = c(96, 78, 101, 119, 103, 91, 86, \nNA, 77, 80, 115, 85, 88, 109, NA, 71, 90, 94, 91, 87, 113, 93, \n97, 118, 109, 80, 85, 119, 99, 108, 89, 108, 97, 116, 79, 84, \n75, 81, 119, NA, 106, 109, 75, 82, 84, 75, 76, 120, 119, 77), \n    smoker = c(\"yes\", \"yes\", \"yes\", \"yes\", \"no\", \"yes\", \"no\", \n    \"yes\", \"no\", \"no\", \"no\", \"no\", \"no\", \"yes\", \"no\", \"yes\", \n    \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"no\", \n    \"no\", \"yes\", \"yes\", \"yes\", \"no\", \"no\", \"yes\", \"no\", \"yes\", \n    \"no\", \"yes\", \"no\", \"yes\", \"yes\", \"yes\", \"no\", \"no\", \"yes\", \n    \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"yes\"), exercise = c(\"occasional\", \n    \"regular\", \"occasional\", \"regular\", \"none\", \"occasional\", \n    \"regular\", \"none\", \"occasional\", \"none\", \"occasional\", \"none\", \n    \"none\", \"regular\", \"occasional\", \"none\", \"regular\", \"regular\", \n    \"none\", \"occasional\", \"none\", \"occasional\", \"occasional\", \n    \"occasional\", \"regular\", \"occasional\", \"regular\", \"regular\", \n    \"regular\", \"occasional\", \"occasional\", \"none\", \"none\", \"regular\", \n    \"occasional\", \"occasional\", \"none\", \"none\", \"none\", \"none\", \n    \"occasional\", \"regular\", \"regular\", \"none\", \"regular\", \"occasional\", \n    \"occasional\", \"none\", \"occasional\", \"regular\"), income = c(84820L, \n    81547L, 22588L, 72490L, 74533L, 25338L, 41469L, 57315L, 63629L, \n    88662L, 62615L, 56261L, 58499L, 82232L, 77584L, 77275L, 38468L, \n    54510L, 91326L, 78611L, 31402L, 29586L, 21441L, 58269L, 84173L, \n    88295L, 37940L, 43750L, 69750L, 92356L, 82518L, 91455L, 68866L, \n    51178L, 68275L, 27689L, 35418L, 81318L, 62405L, 86851L, 25654L, \n    47553L, 74474L, 51409L, 22607L, 55360L, 96351L, 21516L, 41927L, \n    55810L), education = c(\"master\", \"bachelor\", \"PhD\", \"master\", \n    \"bachelor\", \"highschool\", \"PhD\", \"highschool\", \"PhD\", \"PhD\", \n    \"bachelor\", \"highschool\", \"master\", \"bachelor\", \"PhD\", \"PhD\", \n    \"PhD\", \"bachelor\", \"master\", \"highschool\", \"PhD\", \"highschool\", \n    \"bachelor\", \"master\", \"highschool\", \"highschool\", \"master\", \n    \"master\", \"bachelor\", \"PhD\", \"highschool\", \"PhD\", \"master\", \n    \"master\", \"master\", \"PhD\", \"highschool\", \"master\", \"master\", \n    \"highschool\", \"bachelor\", \"highschool\", \"bachelor\", \"PhD\", \n    \"bachelor\", \"highschool\", \"master\", \"highschool\", \"bachelor\", \n    \"bachelor\"), region = c(\"North\", \"South\", \"North\", \"West\", \n    \"North\", \"West\", \"South\", \"South\", \"West\", \"South\", \"West\", \n    \"South\", \"West\", \"East\", \"North\", \"West\", \"North\", \"North\", \n    \"West\", \"North\", \"East\", \"West\", \"South\", \"North\", \"North\", \n    \"East\", \"East\", \"North\", \"North\", \"West\", \"South\", \"West\", \n    \"West\", \"East\", \"West\", \"North\", \"West\", \"North\", \"East\", \n    \"North\", \"West\", \"South\", \"South\", \"East\", \"North\", \"West\", \n    \"West\", \"East\", \"North\", \"East\"), marital_status = c(\"divorced\", \n    \"single\", \"divorced\", \"divorced\", \"divorced\", \"divorced\", \n    \"divorced\", \"married\", \"divorced\", \"married\", \"divorced\", \n    \"widowed\", \"married\", \"single\", \"widowed\", \"widowed\", \"single\", \n    \"divorced\", \"widowed\", \"widowed\", \"single\", \"married\", \"single\", \n    \"married\", \"widowed\", \"married\", \"single\", \"single\", \"widowed\", \n    \"married\", \"widowed\", \"divorced\", \"single\", \"married\", \"single\", \n    \"widowed\", \"widowed\", \"married\", \"widowed\", \"divorced\", \"married\", \n    \"married\", \"divorced\", \"single\", \"married\", \"widowed\", \"divorced\", \n    \"divorced\", \"single\", \"divorced\")), row.names = c(NA, -50L\n), class = c(\"tbl_df\", \"tbl\", \"data.frame\"))\n\nif (!requireNamespace(\"remotes\", quietly = TRUE)) {\n  install.packages(\"remotes\")\n}\nremotes::install_github(\"SATVILab/UtilsDataRSV\")\n\nUsing GitHub PAT from the git credential store.\n\n\nSkipping install of 'UtilsDataRSV' from a github remote, the SHA1 (c7018542) has not changed since last install.\n  Use `force = TRUE` to force installation\n\nUtilsDataRSV::view_cols(df)\n\n[1] \"id\"\n [1] \"id_40\" \"id_2\"  \"id_16\" \"id_9\"  \"id_15\" \"id_23\" \"id_1\"  \"id_42\" \"id_11\"\n[10] \"id_18\" \"id_38\" \"id_22\" \"id_45\" \"id_4\"  \"id_28\" \"id_33\" \"id_10\" \"id_36\"\n[19] \"id_48\" \"id_47\"\n[1] \"30 unique entries not displayed\"\n[1] \"_____________________\"\n[1] \"age\"\n[1] 26 22 24 71 34\n[1] \"_____________________\"\n[1] \"gender\"\n[1] \"female\" \"femal\"  \"male\"  \n[1] \"_____________________\"\n[1] \"height\"\n[1] 197.4 165.6 191.1 199.2    NA\n[1] \"_____________________\"\n[1] \"weight\"\n[1] 83.4 63.3 73.3 69.4 85.4\n[1] \"_____________________\"\n[1] \"blood_type\"\n[1] \"O\"  \"B\"  \"A\"  \"AB\"\n[1] \"_____________________\"\n[1] \"disease_status\"\n[1] \"healthy\"  \"diseased\" \"Healthy\" \n[1] \"_____________________\"\n[1] \"cholesterol\"\n[1] 212 185 248 166 242\n[1] \"_____________________\"\n[1] \"glucose\"\n[1]  94  82  71 113  NA\n[1] \"_____________________\"\n[1] \"smoker\"\n[1] \"no\"  \"yes\"\n[1] \"_____________________\"\n[1] \"exercise\"\n[1] \"none\"       \"occasional\" \"regular\"   \n[1] \"_____________________\"\n[1] \"income\"\n[1] 47553 74533 51178 25654 68866\n[1] \"_____________________\"\n[1] \"education\"\n[1] \"master\"     \"highschool\" \"PhD\"        \"bachelor\"  \n[1] \"_____________________\"\n[1] \"region\"\n[1] \"West\"  \"South\" \"East\"  \"North\"\n[1] \"_____________________\"\n[1] \"marital_status\"\n[1] \"widowed\"  \"single\"   \"divorced\" \"married\" \n[1] \"_____________________\"\n\n\nWarning: Not all unique entries displayed for these non-numeric cols: id\n\n\n\nGender: “femal” was spelled wrong for one of the entries. Should be “female”\nHeight: has a missing N/A value.\nDisease_status: “Healthy” was spelled wrong for one of the entries. Should be “healthy”.\nGlucose: has a missing N/A value.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Practical Four</span>"
    ]
  }
]