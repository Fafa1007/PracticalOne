# Practical One

**NOTE**: the answers to the questions below should be placed into their own qmd file in a Quarto project on GitHub. This Quarto project (the rendered document itself, as well as the source code on GitHub) will be peer-assessed next week.

------------------------------------------------------------------------

## Question 1

Find all rows in “airquality” that have missing values. Note that the `airquality` dataset in `R` is always available (just type `airquality` in the console to see it).

```{r}
airquality_q1 <- airquality[!complete.cases(airquality),] 
airquality_q1
```

------------------------------------------------------------------------

## Question 2

Find mean, sd, min, max for each of temperature and ozone level.

```{r}
airquality_q2 <- airquality  
airquality_q2 
mean_temp <- mean(as.numeric(airquality_q2[[4]]), na.rm = TRUE)
sd_temp <- sd(as.numeric(airquality_q2[[4]]), na.rm = TRUE)
min_temp <- min(as.numeric(airquality_q2[[4]]), na.rm = TRUE)
max_temp <- max(as.numeric(airquality_q2[[4]]), na.rm = TRUE)

mean_ozone <- mean(as.numeric(airquality_q2[[1]]), na.rm = TRUE)
sd_ozone <- sd(as.numeric(airquality_q2[[1]]),na.rm = TRUE)
min_ozone <- min(as.numeric(airquality_q2[[1]]), na.rm = TRUE)
max_ozone <- max(as.numeric(airquality_q2[[1]]), na.rm = TRUE)
```

------------------------------------------------------------------------

## Question 3

For linear regression, parameter estimates can be found as follows $\beta=(X^TX)^{-1}X^TY$. Here, Y is the response variable, and X is the design matrix. The cars data (an R data set, also always available in `R`) contains two variables: speed and distance to stop. Fit a simple linear regression model to these data, i.e. find the β estimates, using the equation above, and matrix calcuations in R.

```{r}
cars <- cars  
cars[] <- lapply(cars,as.numeric) 
head(cars)    
X <- cbind(1,matrix(cars$speed))
Y <- matrix(cars$dist)   #response matrix
n <- nrow(X)             # Number of observations
p <- ncol(X)             # Number of parameters (intercept + predictors)
```

Calculate beta estimate, standard errors, test-statistics and p-values

```{r}
simp_reg <- function(matrix_x, matrix_y){
    
    # Compute beta estimates (OLS solution)
    beta_hat <- solve(t(X) %*% X) %*% (t(X) %*% Y)  # (X'X)^(-1) X'Y

    # Compute residuals
    y_hat <- X %*% beta_hat  # Predicted values
    residuals <- Y - y_hat   # Residuals
    
    # Compute residual variance (sigma^2)
    sigma_sq <- sum(residuals^2) / (n - p)
    
    # Compute variance-covariance matrix of beta estimates
    cov_beta <- sigma_sq * solve(t(X) %*% X)
    
    # Compute standard errors (SE) of beta coefficients
    SE_beta <- sqrt(diag(cov_beta))
    SE_beta
    
    # Compute the test-statistics
    test_stats <- beta_hat / SE_beta
    test_stats
    
    # Calculate p-values
    p_values <- 2 * pt(-abs(test_stats), df = n - p)
    
    return_list <- list(
      Beta_Coefficients = beta_hat,
      Standard_Error = SE_beta,
      Test_Statistics = test_stats,
      P_Values = p_values
    )
    
    print(return_list)
}

simp_reg(X, Y)
```

------------------------------------------------------------------------

## Question 4

Check that you get the same β estimates as when fitting the linear regression model using lm() in R.

```{r}
car_fit <- lm(cars$dist~ cars$speed)  
summary(car_fit)
```
